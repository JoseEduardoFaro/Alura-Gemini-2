{"cells":[{"cell_type":"code","source":["# Configura√ß√£o a API Key do Google Gemini\n","import os\n","from google.colab import userdata\n","os.environ[\"GOOGLE_API_KEY\"] = userdata.get(\"GOOGLE_API_KEY\")\n","import datetime\n","import re # Para simular alguma limpeza de texto\n","\n","# Data atual para refer√™ncia nos c√°lculos de atraso\n","DATA_ATUAL = datetime.date(2025, 5, 17)\n","NOME_AGENCIA = \"HubNinja\"\n","\n","# --- Simula√ß√£o de Dados que seriam extra√≠dos dos arquivos ---\n","def simular_extracao_dados_cr(caminho_arquivo_cr):\n","    \"\"\"\n","    Simula a extra√ß√£o de dados de um arquivo de Contas a Receber.\n","    Em um cen√°rio real, aqui ocorreria a leitura e parsing do arquivo (Excel, XML, PDF).\n","    \"\"\"\n","    if not caminho_arquivo_cr: # Simula arquivo n√£o encontrado ou erro de leitura\n","        return None\n","\n","    print(f\"üìù (Simula√ß√£o) Extraindo dados do arquivo de Contas a Receber: {caminho_arquivo_cr}\")\n","    # Dados de exemplo para Contas a Receber\n","    dados_cr = [\n","        {\"id_fatura\": \"HN2025-001\", \"cliente\": \"Empresa Solu√ß√µes Criativas\", \"valor_original\": 15000.00, \"data_emissao\": datetime.date(2025, 4, 15), \"data_vencimento\": datetime.date(2025, 5, 15), \"status_interno\": \"Pendente\"},\n","        {\"id_fatura\": \"HN2025-002\", \"cliente\": \"Marketing Vision√°rio Ltda\", \"valor_original\": 22000.00, \"data_emissao\": datetime.date(2025, 4, 20), \"data_vencimento\": datetime.date(2025, 5, 10), \"status_interno\": \"Pendente\"},\n","        {\"id_fatura\": \"HN2025-003\", \"cliente\": \"Neg√≥cios Digitais Express\", \"valor_original\": 8500.00, \"data_emissao\": datetime.date(2025, 4, 25), \"data_vencimento\": datetime.date(2025, 5, 5), \"status_interno\": \"Pendente\"},\n","        {\"id_fatura\": \"HN2025-004\", \"cliente\": \"Conex√£o Global S.A.\", \"valor_original\": 30000.00, \"data_emissao\": datetime.date(2025, 5, 1), \"data_vencimento\": datetime.date(2025, 5, 20), \"status_interno\": \"Pendente\"},\n","        {\"id_fatura\": \"HN2025-005\", \"cliente\": \"InovaTech BR\", \"valor_original\": 12000.00, \"data_emissao\": datetime.date(2025, 4, 10), \"data_vencimento\": datetime.date(2025, 4, 30), \"status_interno\": \"Pago Confirmado\"}, # Exemplo de uma j√° paga no sistema\n","    ]\n","    return dados_cr\n","\n","def simular_extracao_dados_extrato(caminho_arquivo_extrato):\n","    \"\"\"\n","    Simula a extra√ß√£o de dados de um arquivo de Extrato Banc√°rio.\n","    \"\"\"\n","    if not caminho_arquivo_extrato:\n","        return None\n","\n","    print(f\"üè¶ (Simula√ß√£o) Extraindo dados do arquivo de Extrato Banc√°rio: {caminho_arquivo_extrato}\")\n","    # Dados de exemplo para Extrato Banc√°rio\n","    dados_extrato = [\n","        {\"data_lancamento\": datetime.date(2025, 5, 6), \"descricao\": \"PGTO FAT HN2025-003 NEGOCIOS DIGITAIS\", \"valor\": 8500.00, \"tipo\": \"CREDITO\"},\n","        {\"data_lancamento\": datetime.date(2025, 5, 11), \"descricao\": \"TRANSFERENCIA MARKETING VISIONARIO LTDA\", \"valor\": 21900.00, \"tipo\": \"CREDITO\"}, # Valor ligeiramente diferente\n","        {\"data_lancamento\": datetime.date(2025, 5, 16), \"descricao\": \"PIX EMPRESA SOLUCOES CRIATIVAS\", \"valor\": 15000.00, \"tipo\": \"CREDITO\"},\n","        {\"data_lancamento\": datetime.date(2025, 5, 1), \"descricao\": \"TARIFA MANUTENCAO CONTA PJ\", \"valor\": -75.00, \"tipo\": \"DEBITO\"},\n","        {\"data_lancamento\": datetime.date(2025, 5, 18), \"descricao\": \"DOC RECEBIDO CLIENTE Y\", \"valor\": 5000.00, \"tipo\": \"CREDITO\"}, # Pagamento n√£o identificado no CR\n","    ]\n","    return dados_extrato\n","\n","class AgenteReceptorArquivos:\n","    \"\"\"\n","    Agente 1: Respons√°vel por receber/validar os arquivos de entrada.\n","    \"\"\"\n","    def __init__(self):\n","        self.dados_cr = None\n","        self.dados_extrato = None\n","\n","    def receber_e_validar_arquivos(self, caminho_arquivo_cr=None, caminho_arquivo_extrato=None):\n","        print(\"üìÇ AGENTE RECEPTOR DE ARQUIVOS üìÇ\")\n","        arquivos_ok = True\n","\n","        if not caminho_arquivo_cr:\n","            print(\"‚ö†Ô∏è Aten√ß√£o: O arquivo de Contas a Receber n√£o foi fornecido. Por favor, realize o input deste arquivo.\")\n","            arquivos_ok = False\n","        else:\n","            self.dados_cr = simular_extracao_dados_cr(caminho_arquivo_cr)\n","            if not self.dados_cr:\n","                print(f\"‚ö†Ô∏è Erro: N√£o foi poss√≠vel processar o arquivo de Contas a Receber: {caminho_arquivo_cr}.\")\n","                arquivos_ok = False\n","\n","        if not caminho_arquivo_extrato:\n","            print(\"‚ö†Ô∏è Aten√ß√£o: O arquivo de Extrato Banc√°rio n√£o foi fornecido. Por favor, realize o input deste arquivo.\")\n","            arquivos_ok = False\n","        else:\n","            self.dados_extrato = simular_extracao_dados_extrato(caminho_arquivo_extrato)\n","            if not self.dados_extrato:\n","                print(f\"‚ö†Ô∏è Erro: N√£o foi poss√≠vel processar o arquivo de Extrato Banc√°rio: {caminho_arquivo_extrato}.\")\n","                arquivos_ok = False\n","\n","        if not self.dados_cr or not self.dados_extrato: # Checagem adicional se a simula√ß√£o falhou\n","             arquivos_ok = False\n","\n","        if arquivos_ok:\n","            print(\"‚úÖ Arquivos de Contas a Receber e Extrato Banc√°rio recebidos e dados extra√≠dos (simula√ß√£o).\")\n","            return self.dados_cr, self.dados_extrato\n","        else:\n","            print(\"‚ùå Processo interrompido devido √† falta de arquivos ou erro na extra√ß√£o.\")\n","            return None, None\n","\n","class AgenteConciliador:\n","    \"\"\"\n","    Agente 2: Efetua a concilia√ß√£o entre Contas a Receber e Extrato Banc√°rio.\n","    \"\"\"\n","    def __init__(self, dados_cr, dados_extrato, data_referencia):\n","        self.dados_cr_originais = dados_cr\n","        self.dados_extrato = dados_extrato\n","        self.data_referencia = data_referencia\n","        self.faturas_conciliadas = []\n","        self.divergencias = []\n","        self.pagamentos_nao_identificados_cr = [] # Pagamentos no extrato sem CR correspondente\n","\n","    def _encontrar_fatura_correspondente(self, lancamento_extrato):\n","        \"\"\"\n","        Tenta encontrar uma fatura no CR que corresponda a um lan√ßamento do extrato.\n","        Simula√ß√£o simplificada: busca por ID na descri√ß√£o ou valor muito pr√≥ximo.\n","        \"\"\"\n","        for fatura_cr in self.dados_cr_originais:\n","            if fatura_cr.get('_conciliada', False): continue # J√° conciliada\n","\n","            # Tenta por ID da fatura na descri√ß√£o do extrato\n","            if fatura_cr[\"id_fatura\"] in lancamento_extrato[\"descricao\"]:\n","                return fatura_cr\n","\n","            # Tenta por valor pr√≥ximo (margem de toler√¢ncia pequena, ex: 1%) e cliente na descri√ß√£o\n","            # Esta l√≥gica precisaria ser muito mais robusta em um cen√°rio real\n","            valor_min = fatura_cr[\"valor_original\"] * 0.99\n","            valor_max = fatura_cr[\"valor_original\"] * 1.01\n","            if valor_min <= lancamento_extrato[\"valor\"] <= valor_max and \\\n","               fatura_cr[\"cliente\"].split(\" \")[0].lower() in lancamento_extrato[\"descricao\"].lower(): # Compara primeira palavra do nome do cliente\n","                return fatura_cr\n","        return None\n","\n","    def conciliar_pagamentos(self):\n","        print(\"\\nüîó AGENTE CONCILIADOR üîó\")\n","        if not self.dados_cr_originais or not self.dados_extrato:\n","            print(\"‚ö†Ô∏è N√£o foi poss√≠vel iniciar a concilia√ß√£o: dados de CR ou Extrato ausentes.\")\n","            return {\"conciliadas\": [], \"divergencias\": [], \"nao_identificados_cr\": [], \"cr_pendente_final\": self.dados_cr_originais}\n","\n","        cr_atualizado = [dict(f) for f in self.dados_cr_originais] # C√≥pia para atualizar status\n","\n","        for lancamento_extrato in self.dados_extrato:\n","            if lancamento_extrato[\"tipo\"] != \"CREDITO\" or lancamento_extrato[\"valor\"] <= 0:\n","                continue # Processar apenas cr√©ditos positivos\n","\n","            fatura_cr_correspondente = self._encontrar_fatura_correspondente(lancamento_extrato)\n","\n","            if fatura_cr_correspondente:\n","                fatura_cr_original_idx = next((i for i, item in enumerate(cr_atualizado) if item[\"id_fatura\"] == fatura_cr_correspondente[\"id_fatura\"]), None)\n","\n","                if fatura_cr_original_idx is not None:\n","                    fatura_para_atualizar = cr_atualizado[fatura_cr_original_idx]\n","\n","                    if fatura_para_atualizar.get('_conciliada', False): # Evitar re-conciliar\n","                        continue\n","\n","                    conciliacao_item = {\n","                        \"id_fatura\": fatura_para_atualizar[\"id_fatura\"],\n","                        \"cliente\": fatura_para_atualizar[\"cliente\"],\n","                        \"valor_esperado_cr\": fatura_para_atualizar[\"valor_original\"],\n","                        \"data_vencimento_cr\": fatura_para_atualizar[\"data_vencimento\"],\n","                        \"valor_pago_extrato\": lancamento_extrato[\"valor\"],\n","                        \"data_pagamento_extrato\": lancamento_extrato[\"data_lancamento\"],\n","                        \"descricao_extrato\": lancamento_extrato[\"descricao\"]\n","                    }\n","\n","                    # Verificar diverg√™ncias\n","                    divergencia_valor = abs(fatura_para_atualizar[\"valor_original\"] - lancamento_extrato[\"valor\"]) > 0.01 # Toler√¢ncia de 1 centavo\n","                    # Diverg√™ncia de data (ex: pagamento muito depois do vencimento, mas aqui s√≥ registramos)\n","\n","                    if divergencia_valor:\n","                        conciliacao_item[\"tipo_divergencia\"] = \"Valor\"\n","                        conciliacao_item[\"detalhe_divergencia\"] = f\"Valor CR R${fatura_para_atualizar['valor_original']:.2f} vs Extrato R${lancamento_extrato['valor']:.2f}\"\n","                        self.divergencias.append(conciliacao_item)\n","                        print(f\"  ‚ö†Ô∏è Diverg√™ncia de VALOR: Fatura {fatura_para_atualizar['id_fatura']} ({fatura_para_atualizar['cliente']}). CR: R${fatura_para_atualizar['valor_original']:.2f}, Extrato: R${lancamento_extrato['valor']:.2f}. Data Pgto: {lancamento_extrato['data_lancamento'].strftime('%d/%m/%Y')}\")\n","                        # Sugest√£o: \"Sugerimos verificar o lan√ßamento e, se necess√°rio, ajustar o valor no sistema CR ou contatar o cliente.\"\n","                        fatura_para_atualizar[\"status_interno\"] = \"Pago com Diverg√™ncia\"\n","                    else:\n","                        print(f\"  ‚úÖ Conciliado: Fatura {fatura_para_atualizar['id_fatura']} ({fatura_para_atualizar['cliente']}) - Valor R${lancamento_extrato['valor']:.2f} em {lancamento_extrato['data_lancamento'].strftime('%d/%m/%Y')}\")\n","                        fatura_para_atualizar[\"status_interno\"] = \"Pago Confirmado\"\n","\n","                    fatura_para_atualizar[\"data_pagamento_efetivo\"] = lancamento_extrato[\"data_lancamento\"]\n","                    fatura_para_atualizar[\"valor_pago_efetivo\"] = lancamento_extrato[\"valor\"]\n","                    fatura_para_atualizar[\"_conciliada\"] = True # Marca como processada para n√£o pegar de novo\n","                    self.faturas_conciliadas.append(conciliacao_item)\n","\n","            else: # Pagamento no extrato sem correspondente claro no CR\n","                item_nao_identificado = {\n","                    \"data_pagamento_extrato\": lancamento_extrato[\"data_lancamento\"],\n","                    \"valor_pago_extrato\": lancamento_extrato[\"valor\"],\n","                    \"descricao_extrato\": lancamento_extrato[\"descricao\"]\n","                }\n","                self.pagamentos_nao_identificados_cr.append(item_nao_identificado)\n","                print(f\"  ‚ùì Pagamento n√£o identificado no CR: {lancamento_extrato['descricao']} - R${lancamento_extrato['valor']:.2f} em {lancamento_extrato['data_lancamento'].strftime('%d/%m/%Y')}\")\n","\n","        cr_pendente_final = [f for f in cr_atualizado if \"Pago\" not in f[\"status_interno\"]]\n","\n","        print(f\"\\nConcilia√ß√£o finalizada. {len(self.faturas_conciliadas)} pagamentos conciliados (com ou sem diverg√™ncias).\")\n","        if self.divergencias:\n","            print(f\"{len(self.divergencias)} diverg√™ncias encontradas. √â necess√°rio an√°lise e ajuste manual.\")\n","        if self.pagamentos_nao_identificados_cr:\n","            print(f\"{len(self.pagamentos_nao_identificados_cr)} pagamentos no extrato n√£o foram automaticamente identificados no Contas a Receber.\")\n","\n","        return {\n","            \"conciliadas_detalhes\": self.faturas_conciliadas,\n","            \"divergencias_detalhes\": self.divergencias,\n","            \"nao_identificados_cr_detalhes\": self.pagamentos_nao_identificados_cr,\n","            \"cr_final_apos_conciliacao\": cr_atualizado # Retorna a lista de CR completa com status atualizados\n","        }\n","\n","class AgenteAnalistaFinanceiro:\n","    \"\"\"\n","    Agente 3: Realiza uma an√°lise completa utilizando informa√ß√µes dos arquivos conciliados.\n","    \"\"\"\n","    def __init__(self, cr_apos_conciliacao, data_referencia):\n","        self.cr_analise = cr_apos_conciliacao\n","        self.data_referencia = data_referencia\n","        self.relatorio_analise = {}\n","\n","    def _calcular_metricas_cr(self):\n","        total_recebido_confirmado = sum(f['valor_pago_efetivo'] for f in self.cr_analise if f.get('status_interno') == 'Pago Confirmado' and 'valor_pago_efetivo' in f)\n","        total_recebido_divergencia = sum(f['valor_pago_efetivo'] for f in self.cr_analise if f.get('status_interno') == 'Pago com Diverg√™ncia' and 'valor_pago_efetivo' in f)\n","\n","        faturas_pendentes = [f for f in self.cr_analise if f.get('status_interno') == 'Pendente']\n","        total_pendente = sum(f['valor_original'] for f in faturas_pendentes)\n","\n","        faturas_vencidas = []\n","        total_vencido = 0\n","        aging = {\"0-30 dias\": 0, \"31-60 dias\": 0, \"61-90 dias\": 0, \">90 dias\": 0, \"A Vencer\":0}\n","\n","        for f in faturas_pendentes:\n","            if f['data_vencimento'] < self.data_referencia:\n","                dias_atraso = (self.data_referencia - f['data_vencimento']).days\n","                f['dias_atraso'] = dias_atraso\n","                faturas_vencidas.append(f)\n","                total_vencido += f['valor_original']\n","                if 0 <= dias_atraso <= 30: aging[\"0-30 dias\"] += f['valor_original']\n","                elif 31 <= dias_atraso <= 60: aging[\"31-60 dias\"] += f['valor_original']\n","                elif 61 <= dias_atraso <= 90: aging[\"61-90 dias\"] += f['valor_original']\n","                else: aging[\">90 dias\"] += f['valor_original']\n","            else:\n","                 aging[\"A Vencer\"] += f['valor_original']\n","\n","\n","        # PMR Simplificado (considerando faturamento do per√≠odo igual ao total pendente + recebido no per√≠odo)\n","        # Idealmente, a receita l√≠quida do per√≠odo seria um input separado.\n","        # Aqui, vamos usar o total de CR original como proxy da receita do per√≠odo para o PMR.\n","        receita_periodo_proxy = sum(f['valor_original'] for f in self.cr_analise if f.get('status_interno') != 'Pago Confirmado Antes da Conciliacao') # Exclui o que j√° estava pago\n","        pmr = (total_pendente / receita_periodo_proxy) * 30 if receita_periodo_proxy > 0 else 0\n","\n","\n","        self.relatorio_analise = {\n","            \"data_analise\": self.data_referencia.strftime('%d/%m/%Y'),\n","            \"total_faturas_analisadas\": len(self.cr_analise),\n","            \"total_recebido_confirmado\": total_recebido_confirmado,\n","            \"total_recebido_com_divergencia\": total_recebido_divergencia,\n","            \"total_geral_pendente\": total_pendente,\n","            \"total_vencido\": total_vencido,\n","            \"percentual_vencido_sobre_pendente\": (total_vencido / total_pendente * 100) if total_pendente > 0 else 0,\n","            \"faturas_pendentes_detalhes\": sorted(faturas_pendentes, key=lambda x: x['data_vencimento']),\n","            \"faturas_vencidas_detalhes\": sorted(faturas_vencidas, key=lambda x: x.get('dias_atraso', 0), reverse=True),\n","            \"aging_contas_receber\": aging,\n","            \"prazo_medio_recebimento_estimado_dias\": pmr,\n","        }\n","\n","    def analisar_contas_receber(self):\n","        print(\"\\nüìà AGENTE ANALISTA FINANCEIRO üìà\")\n","        if not self.cr_analise:\n","            print(\"‚ö†Ô∏è An√°lise n√£o p√¥de ser realizada: dados de Contas a Receber (p√≥s-concilia√ß√£o) ausentes.\")\n","            return None\n","\n","        self._calcular_metricas_cr()\n","        print(\"An√°lise financeira do Contas a Receber conclu√≠da.\")\n","        # Poderia imprimir um resumo aqui, mas ser√° feito pelo AgenteApresentadorCFO\n","        return self.relatorio_analise\n","\n","class AgenteApresentadorCFO:\n","    \"\"\"\n","    Agente 4: Corrige erros e gera uma apresenta√ß√£o com informa√ß√µes relevantes para o Dono da Ag√™ncia.\n","    \"\"\"\n","    def __init__(self, relatorio_analise, nome_agencia, data_referencia):\n","        self.relatorio = relatorio_analise\n","        self.nome_agencia = nome_agencia\n","        self.data_referencia = data_referencia # Usar a data da an√°lise\n","\n","    def _corrigir_texto(self, texto):\n","        \"\"\"Simula corre√ß√£o ortogr√°fica e de concord√¢ncia.\"\"\"\n","        texto_corrigido = texto.replace(\"  \", \" \") # Exemplo simples: remove espa√ßos duplos\n","        # Outras corre√ß√µes poderiam ser aplicadas aqui com bibliotecas de NLP\n","        return texto_corrigido.strip()\n","\n","    def gerar_apresentacao_para_diretoria(self):\n","        print(\"\\nüëî AGENTE APRESENTADOR CFO (GERANDO RELAT√ìRIO PARA DIRETORIA) üëî\")\n","        if not self.relatorio:\n","            return \"Relat√≥rio de an√°lise financeira n√£o dispon√≠vel para apresenta√ß√£o.\"\n","\n","        apresentacao = []\n","        apresentacao.append(f\"RELAT√ìRIO EXECUTIVO DE CONTAS A RECEBER - {self.nome_agencia.upper()}\")\n","        apresentacao.append(f\"Data da An√°lise: {self.relatorio.get('data_analise', self.data_referencia.strftime('%d/%m/%Y'))}\")\n","        apresentacao.append(\"=\"*70)\n","\n","        apresentacao.append(\"\\n**SUM√ÅRIO FINANCEIRO GERAL:**\")\n","        apresentacao.append(self._corrigir_texto(f\"- Total Recebido (Confirmado P√≥s-Concilia√ß√£o): R$ {self.relatorio.get('total_recebido_confirmado', 0):,.2f}\"))\n","        if self.relatorio.get('total_recebido_com_divergencia', 0) > 0:\n","            apresentacao.append(self._corrigir_texto(f\"- Total Recebido (com Diverg√™ncias na Concilia√ß√£o): R$ {self.relatorio.get('total_recebido_com_divergencia', 0):,.2f}\"))\n","        apresentacao.append(self._corrigir_texto(f\"- Saldo Total Pendente de Recebimento: R$ {self.relatorio.get('total_geral_pendente', 0):,.2f}\"))\n","\n","        apresentacao.append(\"\\n**AN√ÅLISE DE INADIMPL√äNCIA:**\")\n","        apresentacao.append(self._corrigir_texto(f\"- Total Vencido: R$ {self.relatorio.get('total_vencido', 0):,.2f}\"))\n","        apresentacao.append(self._corrigir_texto(f\"- Percentual Vencido sobre o Saldo Pendente: {self.relatorio.get('percentual_vencido_sobre_pendente', 0):.2f}%\"))\n","        apresentacao.append(self._corrigir_texto(f\"- Prazo M√©dio de Recebimento (PMR Estimado): {self.relatorio.get('prazo_medio_recebimento_estimado_dias', 0):.2f} dias\"))\n","\n","        aging = self.relatorio.get('aging_contas_receber', {})\n","        if aging:\n","            apresentacao.append(\"\\n**AGING LIST (Distribui√ß√£o de Valores Pendentes por Prazo):**\")\n","            apresentacao.append(f\"  - A Vencer: R$ {aging.get('A Vencer', 0):,.2f}\")\n","            apresentacao.append(f\"  - Vencido 0-30 dias: R$ {aging.get('0-30 dias', 0):,.2f}\")\n","            apresentacao.append(f\"  - Vencido 31-60 dias: R$ {aging.get('31-60 dias', 0):,.2f}\")\n","            apresentacao.append(f\"  - Vencido 61-90 dias: R$ {aging.get('61-90 dias', 0):,.2f}\")\n","            apresentacao.append(f\"  - Vencido >90 dias: R$ {aging.get('>90 dias', 0):,.2f}\")\n","\n","        faturas_vencidas_criticas = self.relatorio.get('faturas_vencidas_detalhes', [])[:3] # Top 3\n","        if faturas_vencidas_criticas:\n","            apresentacao.append(\"\\n**PONTOS DE ATEN√á√ÉO (PRINCIPAIS FATURAS VENCIDAS):**\")\n","            for f in faturas_vencidas_criticas:\n","                apresentacao.append(self._corrigir_texto(f\"  - Cliente: {f['cliente']}, Fatura: {f['id_fatura']}, Valor: R$ {f['valor_original']:,.2f}, Vencimento: {f['data_vencimento'].strftime('%d/%m/%Y')}, Dias Atraso: {f.get('dias_atraso', 'N/A')}\"))\n","\n","        apresentacao.append(\"\\n**RECOMENDA√á√ïES ESTRAT√âGICAS (CFO):**\")\n","        recomendacoes_cfo = [\n","            \"Intensificar as a√ß√µes de cobran√ßa para faturas vencidas, especialmente aquelas com mais de 30 dias.\",\n","            \"Revisar os limites de cr√©dito para clientes com hist√≥rico de atraso recorrente.\",\n","            \"Analisar as causas das diverg√™ncias de concilia√ß√£o para aprimorar processos internos de faturamento.\",\n","            \"Considerar a implementa√ß√£o de r√©guas de cobran√ßa automatizadas para otimizar o tempo da equipe.\",\n","            \"Avaliar a oferta de descontos para pagamentos antecipados como incentivo para melhorar o fluxo de caixa.\"\n","        ]\n","        for i, rec in enumerate(recomendacoes_cfo, 1):\n","            apresentacao.append(self._corrigir_texto(f\"{i}. {rec}\"))\n","\n","        apresentacao.append(\"\\n\"+\"=\"*70)\n","        apresentacao.append(\"Este relat√≥rio foi gerado para fornecer uma vis√£o clara da sa√∫de do Contas a Receber e apoiar a tomada de decis√µes estrat√©gicas.\")\n","\n","        return \"\\n\".join(apresentacao)\n","\n","class AgenteDesignerGrafico:\n","    \"\"\"\n","    Agente 5: Melhora o layout da apresenta√ß√£o com foco em comunica√ß√£o visual (simulado).\n","    \"\"\"\n","    def __init__(self, texto_apresentacao_cfo):\n","        self.texto_original = texto_apresentacao_cfo\n","\n","    def aprimorar_layout_visual(self):\n","        print(\"\\nüé® AGENTE DESIGNER GR√ÅFICO (APRIMORANDO VISUAL DA APRESENTA√á√ÉO) üé®\")\n","        if not self.texto_original:\n","            return \"Conte√∫do da apresenta√ß√£o n√£o dispon√≠vel para design.\"\n","\n","        # Simula√ß√£o de melhorias visuais (formata√ß√£o de texto)\n","        layout_aprimorado = self.texto_original\n","\n","        # Adicionar \"Gr√°ficos\" ASCII simples para o Aging List\n","        # Esta √© uma simula√ß√£o MUITO b√°sica. Bibliotecas como matplotlib poderiam gerar imagens reais.\n","        aging_match = re.search(r\"\\*\\*AGING LIST \\(Distribui√ß√£o de Valores Pendentes por Prazo\\):\\*\\*\", layout_aprimorado)\n","        if aging_match:\n","            try:\n","                # Extrair valores do aging list para o \"gr√°fico\"\n","                # Esta parte √© fr√°gil e depende da formata√ß√£o exata do texto do CFO\n","                val_a_vencer = float(re.search(r\"A Vencer: R\\$ ([\\d\\.,]+)\", layout_aprimorado).group(1).replace(\".\",\"\").replace(\",\",\".\"))\n","                val_0_30 = float(re.search(r\"Vencido 0-30 dias: R\\$ ([\\d\\.,]+)\", layout_aprimorado).group(1).replace(\".\",\"\").replace(\",\",\".\"))\n","                val_31_60 = float(re.search(r\"Vencido 31-60 dias: R\\$ ([\\d\\.,]+)\", layout_aprimorado).group(1).replace(\".\",\"\").replace(\",\",\".\"))\n","                val_61_90 = float(re.search(r\"Vencido 61-90 dias: R\\$ ([\\d\\.,]+)\", layout_aprimorado).group(1).replace(\".\",\"\").replace(\",\",\".\"))\n","                val_mais_90 = float(re.search(r\"Vencido >90 dias: R\\$ ([\\d\\.,]+)\", layout_aprimorado).group(1).replace(\".\",\"\").replace(\",\",\".\"))\n","                total_aging = val_a_vencer + val_0_30 + val_31_60 + val_61_90 + val_mais_90\n","\n","                grafico_aging_ascii = [\n","                    \"\\n  [GR√ÅFICO DE BARRAS SIMULADO - AGING LIST]\",\n","                    \"  -------------------------------------------\",\n","                    f\"  A Vencer    | {'#' * int(val_a_vencer / total_aging * 30) if total_aging > 0 else ''} ({val_a_vencer:,.0f})\",\n","                    f\"  0-30 dias   | {'#' * int(val_0_30 / total_aging * 30) if total_aging > 0 else ''} ({val_0_30:,.0f})\",\n","                    f\"  31-60 dias  | {'#' * int(val_31_60 / total_aging * 30) if total_aging > 0 else ''} ({val_31_60:,.0f})\",\n","                    f\"  61-90 dias  | {'#' * int(val_61_90 / total_aging * 30) if total_aging > 0 else ''} ({val_61_90:,.0f})\",\n","                    f\"  >90 dias    | {'#' * int(val_mais_90 / total_aging * 30) if total_aging > 0 else ''} ({val_mais_90:,.0f})\",\n","                    \"  -------------------------------------------\"\n","                ]\n","                # Inserir o \"gr√°fico\" ap√≥s a se√ß√£o de Aging List\n","                idx_insert = layout_aprimorado.find(\"Vencido >90 dias:\")\n","                if idx_insert != -1:\n","                    # Encontrar o final da linha para inserir depois\n","                    end_line_idx = layout_aprimorado.find(\"\\n\", idx_insert)\n","                    if end_line_idx != -1:\n","                         layout_aprimorado = layout_aprimorado[:end_line_idx+1] + \"\\n\".join(grafico_aging_ascii) + layout_aprimorado[end_line_idx+1:]\n","\n","            except Exception as e:\n","                print(f\"  (Designer) Erro ao tentar gerar gr√°fico ASCII para Aging List: {e}\")\n","\n","\n","        # Outras melhorias:\n","        layout_aprimorado = layout_aprimorado.replace(\"**\", \"==== \") # Destacar t√≠tulos\n","        layout_aprimorado = layout_aprimorado.replace(\"====\", \"\\n==== \", 1) # Adicionar espa√ßo antes do primeiro t√≠tulo\n","        layout_aprimorado = re.sub(r\"==== (.*?):\", r\"==== \\1 ====\", layout_aprimorado) # Fechar t√≠tulos\n","\n","        print(\"Layout da apresenta√ß√£o aprimorado (simula√ß√£o).\")\n","        return layout_aprimorado\n","\n","class OrquestradorHubNinjaCR:\n","    \"\"\"\n","    Orquestra o fluxo de trabalho entre os diferentes agentes.\n","    \"\"\"\n","    def __init__(self, nome_agencia, data_referencia):\n","        self.nome_agencia = nome_agencia\n","        self.data_referencia = data_referencia\n","        self.agente_receptor = AgenteReceptorArquivos()\n","        # Os outros agentes s√£o instanciados conforme os dados se tornam dispon√≠veis\n","\n","    def iniciar_processo_analise_cr(self, caminho_cr, caminho_extrato):\n","        print(f\"üöÄ INICIANDO PROCESSO DE AN√ÅLISE DE CONTAS A RECEBER PARA {self.nome_agencia} üöÄ\")\n","        print(f\"Data de Refer√™ncia para An√°lise: {self.data_referencia.strftime('%d/%m/%Y')}\")\n","        print(\"-\" * 70)\n","\n","        # 1. Agente Receptor\n","        dados_cr, dados_extrato = self.agente_receptor.receber_e_validar_arquivos(caminho_cr, caminho_extrato)\n","        if not dados_cr or not dados_extrato:\n","            print(\"\\nüõë PROCESSO ENCERRADO DEVIDO A PROBLEMAS COM ARQUIVOS DE ENTRADA. üõë\")\n","            return\n","\n","        # 2. Agente Conciliador\n","        agente_conciliador = AgenteConciliador(dados_cr, dados_extrato, self.data_referencia)\n","        resultados_conciliacao = agente_conciliador.conciliar_pagamentos()\n","        cr_apos_conciliacao = resultados_conciliacao.get(\"cr_final_apos_conciliacao\")\n","\n","        if not cr_apos_conciliacao:\n","             print(\"\\nüõë PROCESSO ENCERRADO DEVIDO A FALHA NA CONCILIA√á√ÉO. üõë\")\n","             return\n","\n","        # 3. Agente Analista Financeiro\n","        agente_analista = AgenteAnalistaFinanceiro(cr_apos_conciliacao, self.data_referencia)\n","        relatorio_analise = agente_analista.analisar_contas_receber()\n","        if not relatorio_analise:\n","            print(\"\\nüõë PROCESSO ENCERRADO DEVIDO A FALHA NA AN√ÅLISE FINANCEIRA. üõë\")\n","            return\n","\n","        # Adicionar detalhes da concilia√ß√£o ao relat√≥rio para o CFO ter mais contexto\n","        relatorio_analise[\"detalhes_divergencias_conciliacao\"] = resultados_conciliacao.get(\"divergencias_detalhes\", [])\n","        relatorio_analise[\"detalhes_pagamentos_nao_identificados_cr\"] = resultados_conciliacao.get(\"nao_identificados_cr_detalhes\", [])\n","\n","\n","        # 4. Agente Apresentador CFO\n","        agente_cfo = AgenteApresentadorCFO(relatorio_analise, self.nome_agencia, self.data_referencia)\n","        apresentacao_texto_cfo = agente_cfo.gerar_apresentacao_para_diretoria()\n","\n","        # 5. Agente Designer Gr√°fico\n","        agente_designer = AgenteDesignerGrafico(apresentacao_texto_cfo)\n","        apresentacao_final_formatada = agente_designer.aprimorar_layout_visual()\n","\n","        print(\"-\" * 70)\n","        print(\"\\n‚ú® APRESENTA√á√ÉO FINAL PARA A DIRETORIA ‚ú®\")\n","        print(\"-\" * 70)\n","        print(apresentacao_final_formatada)\n","        print(\"-\" * 70)\n","        print(\"üèÅ PROCESSO DE AN√ÅLISE DE CONTAS A RECEBER CONCLU√çDO. üèÅ\")\n","\n","# --- Execu√ß√£o Principal do Chatbot ---\n","if __name__ == \"__main__\":\n","    # Simular caminhos dos arquivos (em um app real, seriam inputs do usu√°rio ou sistema)\n","    caminho_arquivo_contas_receber = \"simulado_contas_a_receber_hubninja_maio_2025.xlsx\"\n","    caminho_arquivo_extrato_bancario = \"simulado_extrato_bancario_hubninja_maio_2025.pdf\"\n","\n","    # Cen√°rio 1: Tudo OK\n","    print(\"--- CEN√ÅRIO 1: ARQUIVOS FORNECIDOS ---\")\n","    orquestrador = OrquestradorHubNinjaCR(NOME_AGENCIA, DATA_ATUAL)\n","    orquestrador.iniciar_processo_analise_cr(caminho_arquivo_contas_receber, caminho_arquivo_extrato_bancario)\n","\n","    print(\"\\n\" + \"=\"*80 + \"\\n\")\n","\n","    # Cen√°rio 2: Faltando arquivo de CR\n","    print(\"--- CEN√ÅRIO 2: FALTANDO ARQUIVO DE CONTAS A RECEBER ---\")\n","    orquestrador_sem_cr = OrquestradorHubNinjaCR(NOME_AGENCIA, DATA_ATUAL)\n","    orquestrador_sem_cr.iniciar_processo_analise_cr(None, caminho_arquivo_extrato_bancario)\n","\n","    print(\"\\n\" + \"=\"*80 + \"\\n\")\n","\n","    # Cen√°rio 3: Faltando arquivo de Extrato\n","    print(\"--- CEN√ÅRIO 3: FALTANDO ARQUIVO DE EXTRATO BANC√ÅRIO ---\")\n","    orquestrador_sem_extrato = OrquestradorHubNinjaCR(NOME_AGENCIA, DATA_ATUAL)\n","    orquestrador_sem_extrato.iniciar_processo_analise_cr(caminho_arquivo_contas_receber, None)"],"outputs":[{"output_type":"stream","name":"stdout","text":["--- CEN√ÅRIO 1: ARQUIVOS FORNECIDOS ---\n","üöÄ INICIANDO PROCESSO DE AN√ÅLISE DE CONTAS A RECEBER PARA HubNinja üöÄ\n","Data de Refer√™ncia para An√°lise: 17/05/2025\n","----------------------------------------------------------------------\n","üìÇ AGENTE RECEPTOR DE ARQUIVOS üìÇ\n","üìù (Simula√ß√£o) Extraindo dados do arquivo de Contas a Receber: simulado_contas_a_receber_hubninja_maio_2025.xlsx\n","üè¶ (Simula√ß√£o) Extraindo dados do arquivo de Extrato Banc√°rio: simulado_extrato_bancario_hubninja_maio_2025.pdf\n","‚úÖ Arquivos de Contas a Receber e Extrato Banc√°rio recebidos e dados extra√≠dos (simula√ß√£o).\n","\n","üîó AGENTE CONCILIADOR üîó\n","  ‚úÖ Conciliado: Fatura HN2025-003 (Neg√≥cios Digitais Express) - Valor R$8500.00 em 06/05/2025\n","  ‚ö†Ô∏è Diverg√™ncia de VALOR: Fatura HN2025-002 (Marketing Vision√°rio Ltda). CR: R$22000.00, Extrato: R$21900.00. Data Pgto: 11/05/2025\n","  ‚úÖ Conciliado: Fatura HN2025-001 (Empresa Solu√ß√µes Criativas) - Valor R$15000.00 em 16/05/2025\n","  ‚ùì Pagamento n√£o identificado no CR: DOC RECEBIDO CLIENTE Y - R$5000.00 em 18/05/2025\n","\n","Concilia√ß√£o finalizada. 3 pagamentos conciliados (com ou sem diverg√™ncias).\n","1 diverg√™ncias encontradas. √â necess√°rio an√°lise e ajuste manual.\n","1 pagamentos no extrato n√£o foram automaticamente identificados no Contas a Receber.\n","\n","üìà AGENTE ANALISTA FINANCEIRO üìà\n","An√°lise financeira do Contas a Receber conclu√≠da.\n","\n","üëî AGENTE APRESENTADOR CFO (GERANDO RELAT√ìRIO PARA DIRETORIA) üëî\n","\n","üé® AGENTE DESIGNER GR√ÅFICO (APRIMORANDO VISUAL DA APRESENTA√á√ÉO) üé®\n","Layout da apresenta√ß√£o aprimorado (simula√ß√£o).\n","----------------------------------------------------------------------\n","\n","‚ú® APRESENTA√á√ÉO FINAL PARA A DIRETORIA ‚ú®\n","----------------------------------------------------------------------\n","RELAT√ìRIO EXECUTIVO DE CONTAS A RECEBER - HUBNINJA\n","Data da An√°lise: 17/05/2025\n","\n","==== ==================================================================\n","\n","==== SUM√ÅRIO FINANCEIRO GERAL ======== \n","- Total Recebido (Confirmado P√≥s-Concilia√ß√£o): R$ 23,500.00\n","- Total Recebido (com Diverg√™ncias na Concilia√ß√£o): R$ 21,900.00\n","- Saldo Total Pendente de Recebimento: R$ 30,000.00\n","\n","==== AN√ÅLISE DE INADIMPL√äNCIA ======== \n","- Total Vencido: R$ 0.00\n","- Percentual Vencido sobre o Saldo Pendente: 0.00%\n","- Prazo M√©dio de Recebimento (PMR Estimado): 10.29 dias\n","\n","==== AGING LIST (Distribui√ß√£o de Valores Pendentes por Prazo) ======== \n","  - A Vencer: R$ 30,000.00\n","  - Vencido 0-30 dias: R$ 0.00\n","  - Vencido 31-60 dias: R$ 0.00\n","  - Vencido 61-90 dias: R$ 0.00\n","  - Vencido >90 dias: R$ 0.00\n","\n","  [GR√ÅFICO DE BARRAS SIMULADO - AGING LIST]\n","  -------------------------------------------\n","  A Vencer    | ############################## (30)\n","  0-30 dias   |  (0)\n","  31-60 dias  |  (0)\n","  61-90 dias  |  (0)\n","  >90 dias    |  (0)\n","  -------------------------------------------\n","==== RECOMENDA√á√ïES ESTRAT√âGICAS (CFO) ======== \n","1. Intensificar as a√ß√µes de cobran√ßa para faturas vencidas, especialmente aquelas com mais de 30 dias.\n","2. Revisar os limites de cr√©dito para clientes com hist√≥rico de atraso recorrente.\n","3. Analisar as causas das diverg√™ncias de concilia√ß√£o para aprimorar processos internos de faturamento.\n","4. Considerar a implementa√ß√£o de r√©guas de cobran√ßa automatizadas para otimizar o tempo da equipe.\n","5. Avaliar a oferta de descontos para pagamentos antecipados como incentivo para melhorar o fluxo de caixa.\n","\n","======================================================================\n","Este relat√≥rio foi gerado para fornecer uma vis√£o clara da sa√∫de do Contas a Receber e apoiar a tomada de decis√µes estrat√©gicas.\n","----------------------------------------------------------------------\n","üèÅ PROCESSO DE AN√ÅLISE DE CONTAS A RECEBER CONCLU√çDO. üèÅ\n","\n","================================================================================\n","\n","--- CEN√ÅRIO 2: FALTANDO ARQUIVO DE CONTAS A RECEBER ---\n","üöÄ INICIANDO PROCESSO DE AN√ÅLISE DE CONTAS A RECEBER PARA HubNinja üöÄ\n","Data de Refer√™ncia para An√°lise: 17/05/2025\n","----------------------------------------------------------------------\n","üìÇ AGENTE RECEPTOR DE ARQUIVOS üìÇ\n","‚ö†Ô∏è Aten√ß√£o: O arquivo de Contas a Receber n√£o foi fornecido. Por favor, realize o input deste arquivo.\n","üè¶ (Simula√ß√£o) Extraindo dados do arquivo de Extrato Banc√°rio: simulado_extrato_bancario_hubninja_maio_2025.pdf\n","‚ùå Processo interrompido devido √† falta de arquivos ou erro na extra√ß√£o.\n","\n","üõë PROCESSO ENCERRADO DEVIDO A PROBLEMAS COM ARQUIVOS DE ENTRADA. üõë\n","\n","================================================================================\n","\n","--- CEN√ÅRIO 3: FALTANDO ARQUIVO DE EXTRATO BANC√ÅRIO ---\n","üöÄ INICIANDO PROCESSO DE AN√ÅLISE DE CONTAS A RECEBER PARA HubNinja üöÄ\n","Data de Refer√™ncia para An√°lise: 17/05/2025\n","----------------------------------------------------------------------\n","üìÇ AGENTE RECEPTOR DE ARQUIVOS üìÇ\n","üìù (Simula√ß√£o) Extraindo dados do arquivo de Contas a Receber: simulado_contas_a_receber_hubninja_maio_2025.xlsx\n","‚ö†Ô∏è Aten√ß√£o: O arquivo de Extrato Banc√°rio n√£o foi fornecido. Por favor, realize o input deste arquivo.\n","‚ùå Processo interrompido devido √† falta de arquivos ou erro na extra√ß√£o.\n","\n","üõë PROCESSO ENCERRADO DEVIDO A PROBLEMAS COM ARQUIVOS DE ENTRADA. üõë\n"]}],"execution_count":9,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Pu9bTfZJWS7C","executionInfo":{"status":"ok","timestamp":1747505096784,"user_tz":180,"elapsed":883,"user":{"displayName":"Eduardo Melo","userId":"01404489940119486179"}},"outputId":"766b8244-b7da-4290-ee4b-04479dd7ad59"}}],"metadata":{"colab":{"provenance":[]},"kernelspec":{"display_name":"Python 3","name":"python3"}},"nbformat":4,"nbformat_minor":0}